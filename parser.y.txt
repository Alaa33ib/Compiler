%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lex.yy.c" 
%}

%token PROGRAM BEGIN END READ WRITE IF THEN ELSE WHILE DO
%token SEMICOLON COLON ASSIGN_OP RELOP ADDOP MULOP
%token LPAREN RPAREN ID NUM

%%

program : PROGRAM identifier SEMICOLON declarations compound_statement DOT {
    SymbolTable.initialize();
}

declarations : declaration declarations {
    SymbolTable.addVariable($1.identifier, $3.type);
}
             | /* empty */ {
    // nothing is done
}

declaration : identifier COLON type SEMICOLON {
    $$.identifier = $1;
    $$.type = $3;
}

type : INTEGER {
    $$ = INTEGER;
}
     | REAL {
    $$ = REAL;
}

compound_statement : BEGIN statement_sequence END {
     ProcessStatements($2);
}

statement_sequence : statement SEMICOLON statement_sequence {
    ProcessStatement($1);
    ProcessStatementSequence($3);
}
                    | statement SEMICOLON {
    ProcessStatement($1);
}

statement : assignment_statement {
    ProcessStatement($1);
}
          | if_statement {
    ProcessIf($1);
}
          | while_statement {
    ProcessWhile($1);
}
          | read_statement {
    ProcessRead($1);
}
          | write_statement {
    ProcessWrite($1);
}

assignment_statement : identifier ASSIGN_OP expression {
    UpdateVariableValue($1, $3);
}

if_statement : IF condition THEN statement_sequence ELSE statement_sequence {
     if ($2) {
        ExecuteStatementSequence($4); // Execute THEN part
    } else {
        ExecuteStatementSequence($6); // Execute ELSE part
    }
}

while_statement : WHILE condition DO statement_sequence {
    while ($2) {
        ExecuteStatementSequence($4);
    }
}

read_statement : READ identifier {
    $2.value = ReadInput();
}

write_statement : WRITE expression {
    OutputValue(EvaluateExpression($2));
}

condition : expression RELOP expression {
    $$ = CompareExpressions($1, $3, $2);
}

expression : term expression_tail {
    $$ = EvaluateExpression($1, $2);
}

expression_tail : ADDOP term expression_tail {
    $$ = PerformAdditionOrSubtraction($1, $2, $3);
}
                 | /* empty */ {
    $$ = NULL;
}

term : factor term_tail {
     $$ = EvaluateTerm($1, $2);
}

term_tail : MULOP factor term_tail {
    $$ = PerformMultiplicationOrDivision($1, $2, $3);
}
           | /* empty */ {
    $$ = NULL;
}

factor : LPAREN expression RPAREN {
    $$ = $2;
}
       | identifier {
    $$ = GetValueOfIdentifier($1);
}
       | NUM {
    $$ = $1;
}

identifier : ID {
    $$ = $1;
}

%%

int main() {
    yyparse(); // Start parsing
    return 0;
}

void yyerror(const char *msg) {
    fprintf(stderr, "Syntax error: %s at line %d\n", msg, line_number);
    //exit(EXIT_FAILURE);
}
